values = c("dog", "cat", "100/66.5/57.9", "100/93.8/79", "100/48.5/40.5", "100/36.1/38"))
figure %<+% df +  geom_label(aes(label = label.y))
figure %<+% df +  geom_label(aes(label = values))
df <- data.frame(edge = c("11", "12", "13", "14", "15", "16"),
values = c("dog", "cat", "100/66.5/57.9", "100/93.8/79", "100/48.5/40.5", "100/36.1/38"))
figure %<+% df +  geom_label(aes(label = values))
View(figure)
figure[["labels"]]
View(tree_data)
View(rooted_tree)
rooted_tree[["edge"]]
df <- data.frame(edge = c("11", "12", "13", "14", "15", "16"),
values = c("100/26.6/37.4", "100/25.2/35.8", "100/66.5/57.9", "100/93.8/79", "100/48.5/40.5", "100/36.1/38"))
figure %<+% df +  geom_label(aes(label = values))
df
figure %<+% df +  geom_label(aes(label = values.y))
figure %<+% df +  geom_label(aes(label = values, fill = posterior))
figure %<+% df +  geom_label(aes(label = values))
figure %<+% df +  geom_label(aes(label = values.y))
df <- data.frame(edge = c(11, 12, 13, 14, 15, 16),
values = c("100/26.6/37.4", "100/25.2/35.8", "100/66.5/57.9", "100/93.8/79", "100/48.5/40.5", "100/36.1/38"))
figure %<+% df +  geom_label(aes(label = values.y))
df <- data.frame(edge = c(11, 12, 13, 14, 15, 16),
values = c("100/26.6/37.4", "100/25.2/35.8", "100/66.5/57.9", "100/93.8/79", "100/48.5/40.5", "100/36.1/38"))
figure %<+% df +  geom_label(aes(label = values))
df
figure <- ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035)
tree <- read.tree("/Users/matt/desktop/no_bl.txt")
rooted_tree = midpoint.root(tree)
ggtree(rooted_tree)
ggtree(rooted_tree, ladderize=FALSE) + geom_text(aes(label=node), hjust=-.3) + geom_treescale()
figure <- ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035)
figure <- ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035)
ggtree(rooted_tree)
figure <- ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035)
figure
ggtree(rooted_tree, ladderize=FALSE) + geom_text(aes(label=node), hjust=-.3) + geom_treescale()
tr <- read.newick("/Users/matt/desktop/gcf.txt", node.label='support')
library(phytools)
nwk <- read.nwk()
tr <- read.newick("/Users/matt/desktop/gcf.txt", node.label='support')
nwk <- system.file("/Users/matt/desktop","gcf.txt", package='treeio')
tr <- read.tree(nwk)
tr <- read.tree(nwk)
tr <- read.tree(nwk, node.label="support")
nwk <- system.file("/Users/matt/desktop","gcf.txt", package='treeio')
tr <- read.tree(nwk, node.label='support')
library(phytools)
library(treeio)
read.newick
nwk <- system.file("/Users/matt/desktop/","gcf.txt", package='treeio')
nwk
library(ggtree)
library(phytools)
library(treeio)
#tree_data <- read.iqtree("/Users/matt/desktop/gcf.txt")
#tree_data
tree <- read.tree("/Users/matt/desktop/no_bl.txt")
rooted_tree = midpoint.root(tree)
View(rooted_tree)
tree <- read.tree("/Users/matt/desktop/gcf.txt")
rooted_tree = midpoint.root(tree)
View(rooted_tree)
ggtree(rooted_tree) + geom_text(aes(label=node.label))
ggtree(rooted_tree) + geom_text(aes(x=branch, label=node.labels)
ggtree(rooted_tree) + geom_text(aes(x=branch, label=node.labels))
ggtree(rooted_tree) + geom_text(aes(x=branch, label=node.label))
help(ggtree)
ggtree(rooted_tree) + geom_label(aes(x=branch, label=node.label))
ggtree(rooted_tree) + geom_label(aes(x=branch))
View(rooted_tree)
ggtree(rooted_tree) + geom_label(aes(x=branch, label=rooted_tree$node.label))
ggtree(rooted_tree) + geom_text2(aes(subset = !isTip, label=label))
ggtree(rooted_tree) + geom_text2(aes(label=label))
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
tree <- read.tree("/Users/matt/desktop/gcf.txt")
ggtree(rooted_tree) + geom_text2(aes(label=label))
ggtree(rooted_tree) + geom_text2(aes(subset = !isTip, label=label))
ggtree(rooted_tree) + geom_text2(aes(subset = !isTip))
ggtree(rooted_tree) + geom_text2(aes(label=label))
ggtree(rooted_tree) + geom_text2(aes(label=node.label))
ggtree(rooted_tree) + geom_text2(aes(label=label))
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
tree <- read.tree("/Users/matt/desktop/gcf.txt")
ggtree(rooted_tree) + geom_text2(aes(label=label))
rooted_tree = midpoint.root(tree)
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
tree <- read.tree("/Users/matt/desktop/gcf.txt")
ggtree(rooted_tree)
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
tree <- read.tree("/Users/matt/desktop/gcf.txt")
ggtree(tree)
ggtree(tree) + geom_text2(aes(subset = !isTip, label=label))
rooted_tree = midpoint.root(tree)
ggtree(rooted_tree) + geom_text2(aes(subset = !isTip, label=label))
View(rooted_tree)
rooted_tree
type(rooted_tree)
ape::write.tree(rooted_tree)
tree <- read.tree("/Users/matt/desktop/no_bl.txt")
rooted_tree = midpoint.root(tree)
ape::write.tree(rooted_tree)
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
#tree <- read.tree("/Users/matt/desktop/gcf.txt")
tree <- read.tree("/Users/matt/desktop/gcf2.txt")
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
#tree <- read.tree("/Users/matt/desktop/gcf.txt")
rooted_tree <- read.tree("/Users/matt/desktop/gcf2.txt")
rooted_tree
ggtree(rooted_tree) + geom_text2(aes(subset = !isTip, label=label))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, offset = 0.005))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, offset = 0.5))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=1, vjust=1))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=2, vjust=1))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=1.5, vjust=1))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=1.5, vjust=0.5))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=1.5, vjust=0))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=1.5, vjust=-.5))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=1.2, vjust=-.5))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=0, vjust=-.5))
ggtree(rooted_tree) +
ggtree(rooted_tree, ladderize=FALSE) + geom_text(aes(label=node), hjust=-.3) + geom_treescale()
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
#tree <- read.tree("/Users/matt/desktop/gcf.txt")
rooted_tree <- read.tree("/Users/matt/desktop/gcf2.txt")
rooted_tree
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=0, vjust=-.5))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(label=label, hjust=0, vjust=-.5))
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=0, vjust=-.5))
ggtree(rooted_tree) +
ggtree(rooted_tree, ladderize=FALSE) + geom_text(aes(label=node), hjust=-.3) + geom_treescale()
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
tree <- read.tree("/Users/matt/desktop/gcf.txt")
rooted_tree = midpoint.root(tree)
ggtree(rooted_tree) +
ggtree(rooted_tree, ladderize=FALSE) + geom_text(aes(label=node), hjust=-.3) + geom_treescale()
ggtree(rooted_tree, ladderize=FALSE) + geom_tiplab() + geom_cladelab(node=11, label="S Clade", align=TRUE, offset = .005, textcolor='purple', barcolor='purple') + geom_cladelab(node=16, label="M Clade", align=TRUE, offset = 0.005, textcolor='red', barcolor='red') + geom_treescale() + xlim(0,0.035) + geom_text2(aes(subset = !isTip, label=label, hjust=0, vjust=-.5))
tree <- read.tree("/Users/matt/desktop/no_bl.txt")
rooted_tree = midpoint.root(tree)
ggtree(rooted_tree) +
ggtree(rooted_tree, ladderize=FALSE) + geom_text(aes(label=node), hjust=-.3) + geom_treescale()
ggtree(rooted_tree, ladderize=FALSE) + geom_text(aes(label=node), hjust=-.3) + geom_treescale()
ggtree(rooted_tree, ladderize=FALSE) + geom_text2(aes(subset = !isTip, label=label, hjust=0, vjust=-.5))
#tree <- read.tree("/Users/matt/desktop/no_bl.txt")
#tree <- read.tree("/Users/matt/desktop/gcf.txt")
rooted_tree <- read.tree("/Users/matt/desktop/gcf2.txt")
rooted_tree
ggtree(rooted_tree, ladderize=FALSE) + geom_text2(aes(subset = !isTip, label=label, hjust=0, vjust=-.5))
tree <- read.tree("/Users/matt/desktop/gcf.txt")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PANTHER.db")
browseVignettes("PANTHER.db")
library(ggplot2)
mytheme <- theme_classic()+ theme(
legend.position = "top", # this makes the axis titles in bold,
axis.line = element_line(color = "black", size = 1.5),
axis.text = element_text(color="black"),
axis.text.x = element_text(angle=45,hjust = 1),
# Makes the axis line black and  thicker
text = element_text(size = 10, face = "bold",color="black")
) # makes all the text larger and bold
theme_set(mytheme)
# Read the bed file
bed_file <- "/Users/matt/desktop/ten_kb_tracts.bed"
genes <- read.table(bed_file, sep = "\t", header = FALSE)
# Rename the columns
colnames(genes) <- c("chromosome", "start", "end", "gene_name")
# Set the order of chromosomes
chromosomes <- c('NW_022145612.1', 'NW_022145594.1', 'NW_022145606.1', 'NW_022145607.1', 'NW_022145611.1', 'NW_022145605.1', 'NW_022145609.1', 'NW_022145613.1', 'NW_022145599.1', 'NW_022145598.1', 'NW_022145600.1', 'NW_022145610.1', 'NW_022145615.1', 'NW_022145601.1', 'NW_022145603.1', 'NW_022145597.1', 'NW_022145604.1', 'NW_022145614.1', 'NW_022145596.1', 'NW_022145602.1', 'NW_022145595.1')
# Create a data frame for plotting
plot_data <- data.frame(chromosome = factor(genes$chromosome, levels = chromosomes),
start = genes$start,
end = genes$end)
# Calculate the midpoint of each interval
plot_data$midpoint <- (plot_data$start + plot_data$end) / 2
# Create the plot
ggplot(plot_data, aes(x = midpoint, y = chromosome, color = "blue")) +
geom_segment(aes(x = start, xend = end, y = chromosome, yend = chromosome), size = 5) +
scale_color_discrete(guide = FALSE) +  # Remove the legend
labs(x = "Position", y = "Chromosome") +
scale_x_continuous(labels = scales::comma) +  # Display x-axis labels without scientific notation
# Remove the background from the theme
theme(panel.background = element_blank()) +
# Add lines representing the X and Y Axes
theme(panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text = element_text(size = 10), # Increase font size of axis labels
axis.title = element_text(size = 20)) # Increase font size of axis titles
ggplot(plot_data, aes(x = midpoint, y = chromosome, color = "blue")) +
geom_segment(aes(x = start, xend = end, y = chromosome, yend = chromosome), size = 5) +
scale_color_discrete(guide = none) +  # Remove the legend
labs(x = "Position", y = "Chromosome") +
scale_x_continuous(labels = scales::comma) +  # Display x-axis labels without scientific notation
# Remove the background from the theme
theme(panel.background = element_blank()) +
# Add lines representing the X and Y Axes
theme(panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text = element_text(size = 10), # Increase font size of axis labels
axis.title = element_text(size = 20)) # Increase font size of axis titles
ggplot(plot_data, aes(x = midpoint, y = chromosome, color = "blue")) +
geom_segment(aes(x = start, xend = end, y = chromosome, yend = chromosome), size = 5) +
scale_color_discrete(guide = "none") +  # Remove the legend
labs(x = "Position", y = "Chromosome") +
scale_x_continuous(labels = scales::comma) +  # Display x-axis labels without scientific notation
# Remove the background from the theme
theme(panel.background = element_blank()) +
# Add lines representing the X and Y Axes
theme(panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text = element_text(size = 10), # Increase font size of axis labels
axis.title = element_text(size = 20)) # Increase font size of axis titles
ggplot(plot_data, aes(x = midpoint, y = chromosome, color = "blue")) +
geom_segment(aes(x = start, xend = end, y = chromosome, yend = chromosome), size = 5) +
labs(x = "Position", y = "Chromosome") +
scale_x_continuous(labels = scales::comma) +  # Display x-axis labels without scientific notation
# Remove the background from the theme
theme(panel.background = element_blank()) +
# Add lines representing the X and Y Axes
theme(panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text = element_text(size = 10), # Increase font size of axis labels
axis.title = element_text(size = 20)) # Increase font size of axis titles
ggplot(plot_data, aes(x = midpoint, y = chromosome, color = "Blue")) +
geom_segment(aes(x = start, xend = end, y = chromosome, yend = chromosome), size = 5) +
labs(x = "Position", y = "Chromosome") +
scale_x_continuous(labels = scales::comma) +  # Display x-axis labels without scientific notation
# Remove the background from the theme
theme(panel.background = element_blank()) +
# Add lines representing the X and Y Axes
theme(panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text = element_text(size = 10), # Increase font size of axis labels
axis.title = element_text(size = 20)) # Increase font size of axis titles
ggplot(plot_data) +
geom_segment(aes(x = start, xend = end, y = chromosome, color = "blue"), size = 5) +
labs(x = "Position", y = "Chromosome") +
scale_x_continuous(labels = scales::comma) +  # Display x-axis labels without scientific notation
# Remove the background from the theme
theme(panel.background = element_blank()) +
# Add lines representing the X and Y Axes
theme(panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text = element_text(size = 10), # Increase font size of axis labels
axis.title = element_text(size = 20)) # Increase font size of axis titles
ggplot(plot_data) +
geom_segment(aes(x = start, xend = end, y = chromosome, yend = chromosome, color = "blue"), size = 5) +
labs(x = "Position", y = "Chromosome") +
scale_x_continuous(labels = scales::comma) +  # Display x-axis labels without scientific notation
# Remove the background from the theme
theme(panel.background = element_blank()) +
# Add lines representing the X and Y Axes
theme(panel.border = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.text = element_text(size = 10), # Increase font size of axis labels
axis.title = element_text(size = 20)) # Increase font size of axis titles
getwd()
a=10
print(a)
b="Matt"
# Vector
value_lst = c(1,2,3,4,5,6,7,8,9,10)
len(value_lst)
length(value_lst)
value_lst = c(1:10)
length(value_lst)
value_lst = c(1,10,1)
length(value_lst)
value_lst = c(1:10,1)
length(value_lst)
value_lst = c(1,2,3,4,5,6,7,8,9,10)
value_lst = c(1:10)
length(value_lst)
value_lst[1]
print(value_lst[1])
sum(value_lst)
mean(score)
sd(value_list)
sd(value_lst)
mean(value_lst)
var(value_lst)
max(value_lst)
min(value_lst)
names = c("Matt Glasenapp", "Lebron James", "Taylor Swift")
age = c(27, 38, 33)
df = data.frame(names,age,birth_place)
names = c("Matt Glasenapp", "Lebron James", "Taylor Swift")
age = c(27, 38, 33)
birth_place = c("Lake City", "Akron", "Reading")
df = data.frame(names,age,birth_place)
df
View(df)
plot(df$age)
new_entry = data.frame(names = "Beyonce", age = 41, birth_place = "Houston")
df = rbind(df,new_entry)
# Add a column
sex = c("M", "M", "F", "F")
df = cbind(df,sex)
View(df)
# Fetch Element
df[1,2]
# Fetch Element
df[1,1]
df[2:3,3]
df[2:3,2:3]
df[,1]
df
df$names
# Delete column
df$sex = NULL
getwd()
# Define variable
a=10
print(a)
b="Matt"
# Vectors
value_lst = c(1,2,3,4,5,6,7,8,9,10)
value_lst = c(1:10)
length(value_lst)
value_lst[1]
sum(value_lst)
mean(value_lst)
sd(value_lst)
max(value_lst)
min(value_lst)
# Data frames
names = c("Matt Glasenapp", "Lebron James", "Taylor Swift")
age = c(27, 38, 33)
birth_place = c("Lake City", "Akron", "Reading")
df = data.frame(names,age,birth_place)
View(df)
# Add a row
new_entry = data.frame(names = "Beyonce", age = 41, birth_place = "Houston")
df = rbind(df,new_entry)
# Add a column
sex = c("M", "M", "F", "F")
df = cbind(df,sex)
# Fetch Element (row, column)
df[1,1]
df[2:3,2:3]
df$names
1==1
1==2
if(1==1){
print("True")
}
if(1==1){
print("True")
}else{
print("False")
}
if(1==2){
print("True")
}else{
print("False")
}
if(1==1){
print("True")
}else{
print("False")
}
if((1==1 & (2==2)){
if((1==1) & (2==2)){
print("True")
}else{
print("False")
}
for(i in 1:10){
print(i)
}
for(i in 1:10){
paste("Current Value: ", i)
}
for(i in 1:10){
print(paste("Current Value: ", i))
}
for(i in 1:10){
if(i == 10){
print("End of list")
print(paste("Current Value: ", i))
}
for(i in 1:10){
if(i == 10){
print("End of list")
}
print(paste("Current Value: ", i))
}
for(i in 1:10){
if(i == 10){
print("End of list")
}
print(paste("Current Value: ", i))
}
for(i in 1:10){
if(i == 10){
print("End of list")}
print(paste("Current Value: ", i))
}
for(i in 1:10){
if(i == 10){
print("End of list")
}
print(paste("Current Value: ", i))
}
or(i in 1:10){
for(i in 1:10){
if(i == 10){
print("End of list")}
print(paste("Current Value: ", i))
}
i = 1
for(x in 1:10){
if (x == 10){
print("End of list")
}
i = i+1
}
1 in 1:10
my_function = function(a){
return(a)
}
my_function(a)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(jtools)
data = read.csv("d_k2p.csv")
knitr::kable(data, format="markdown")
strongylocentrotus = data[2:7,]
test <- lm(mean_D ~ mean_sco_k2p, data = strongylocentrotus)
summary(test)
test1 <- lm(mean_dp ~ mean_sco_k2p, data = data)
summary(test1)
test3 <- lm(mean_dp ~ bindin_K2P, data = strongylocentrotus)
summary(test3)
install.packages("sjPlot")
install.packages("sjmisc")
install.packages("sjlabeled")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
lm <- lm(mean_D ~ mean_sco_k2p, data = data)
coef(summary(lm))
summary(lm)
summary(lm$r.squared)
summary(lm)$r.squared)
summary(lm)$r.squared
library(sjPlot)
library(fitdistrplus)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
# Change margin settings
par(mar=c(2,2,2,1))
setwd("/Users/matt/Documents/Github/dissertation_chapter_2/pixy/")
# Define the csv files with list of dXY values
#introgression_tract_dxy_file = "introgression_tracts_mean_dxy_dist.csv"
introgression_tract_dxy_file = "introgression_tracts_mean_dxy_dist.csv"
#species_tree_tract_dxy_file = "species_tree_tracts_mean_dxy.csv"
species_tree_tract_dxy_file = "species_tree_tracts_mean_dxy_80.csv"
dist_introgression_tract_dxy <- scan(introgression_tract_dxy_file, what = numeric(), sep = ",")
dist_species_tree_tract_dxy <- scan(species_tree_tract_dxy_file, what = numeric(), sep = ",")
#species_tree_tract_dxy_file = "species_tree_tracts_mean_dxy.csv"
species_tree_tract_dxy_file = "species_tree_tracts_mean_dxy_dist_80.csv"
dist_species_tree_tract_dxy <- scan(species_tree_tract_dxy_file, what = numeric(), sep = ",")
df <- data.frame(
tract_type = c(rep("introgression_tract", length(dist_introgression_tract_dxy)),
rep("species_tree_tract", length(dist_species_tree_tract_dxy))),
divergence = c(dist_introgression_tract_dxy, dist_species_tree_tract_dxy)
)
boxplot(divergence~tract_type,data=df, ylab = "Divergence (Mean dXY)", xlab = "Type")
# Run t-test
t.test(divergence~tract_type, data=df, paired=FALSE, var.eq=T)
# Define the csv files with list of dXY values
#introgression_tract_dxy_file = "introgression_tracts_mean_dxy_dist.csv"
introgression_tract_dxy_file = "introgression_tracts_mean_dxy_dist_80.csv"
#species_tree_tract_dxy_file = "species_tree_tracts_mean_dxy.csv"
species_tree_tract_dxy_file = "species_tree_tracts_mean_dxy_dist_80.csv"
dist_introgression_tract_dxy <- scan(introgression_tract_dxy_file, what = numeric(), sep = ",")
dist_species_tree_tract_dxy <- scan(species_tree_tract_dxy_file, what = numeric(), sep = ",")
# Create data frame
df <- data.frame(
tract_type = c(rep("introgression_tract", length(dist_introgression_tract_dxy)),
rep("species_tree_tract", length(dist_species_tree_tract_dxy))),
divergence = c(dist_introgression_tract_dxy, dist_species_tree_tract_dxy)
)
boxplot(divergence~tract_type,data=df, ylab = "Divergence (Mean dXY)", xlab = "Type")
hist(df$divergence,ylab="Divergence (dXY)", main = "Divergence")
# Run t-test
t.test(divergence~tract_type, data=df, paired=FALSE, var.eq=T)
summary = df %>%
group_by(tract_type) %>%
dplyr::summarize(n=n(),mean=mean(divergence),sd=sd(divergence)) %>%
mutate(se=sd/sqrt(n)) %>%
mutate(ic=se * qt((1-0.05)/2 + .5, n-1))
# Examine summary tibble
print(summary)
# Construct plot using summary tibble
ggplot(summary) +
geom_bar(aes(x=tract_type, y=mean), stat="identity", fill="firebrick") +
geom_errorbar(aes(x=tract_type, ymin=mean-ic, ymax=mean+ic),
width=0.4, colour="firebrick4", alpha=0.9, size=1.5)+
ylab("Mean (CI)")
mu <- ddply(df, "tract_type", summarise, grp.mean=mean(divergence))
figure <- ggplot(df, aes(x=divergence, fill=tract_type)) +
geom_density(alpha=0.4) +
#geom_vline(data=mu, aes(xintercept=grp.mean, color=tract_type), show.legend = FALSE, linetype="dashed") +
theme(panel.background = element_blank()) +
theme(axis.line = element_line(colour = "black", size = 1)) +
scale_fill_discrete(labels=c('Introgression Tracts', 'Genome-Wide Background')) + theme(legend.title = element_blank())
figure
