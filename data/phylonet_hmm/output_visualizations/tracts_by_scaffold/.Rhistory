install.packags("GenomicFeatures")
install.packages("GenomicFeatures")
install.packages("remotes")
remotes::install_github("coleoguy/evobir")
library(devtools)
install.packages("devtools")
library(devtools)
install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
results <- CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
results
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
library(devtools)
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 300, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 300, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 300, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 100, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 50, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 50, replicate = 100, align.format='fasta')
library(devtools)
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
30.8
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/d_stat/mfra_hpul_sdro_sfra.fa"
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
library(devtools)
CalcD(alignment = alignment_file, sig.test = "J", ambig="R",
block.size = 1000, replicate = 1000, align.format='fasta')
results <- CalcD(alignment = alignment_file, sig.test = "J", ambig="R",
block.size = 1000, replicate = 1000, align.format='fasta')
results
library(evobiR)
alignment_file <- "/Users/matt/Desktop/d_stat/mfra_hpul_sdro_sfra.fa"
# Use capture.output to store the printed output in a variable
captured_output <- capture.output({
results <- CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
})
# Now the captured_output variable contains the printed output
cat(captured_output, sep = "\n")
captured_output
alignment_file = "/Users/matt/Desktop/d_stat/mfra_hpul_sdro_sfra.fa"
# Use capture.output without assigning to results
captured_output <- capture.output({
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
})
captured_output
captured_output[1]
captured_output[2]
class(captured_output)
captured_output[3]
captured_output[4]
captured_output[5]
captured_output[6]
captured_output[7]
captured_output[8]
captured_output[9]
captured_output[10]
captured_output[11]
captured_output[11]
captured_output[12]
captured_output[13]
d <- captured_output[6]
d
sites <- captured_output[3]
captured_output[3]
captured_output
help(CalcD)
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR.00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR_00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/test_spur.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR_00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR_00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Desktop/test.fas"
library(devtools)
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
# Use capture.output without assigning to results
CalcD(alignment = alignment_file, sig.test = "N", ambig = "R", align.format = 'fasta')
alignment_file = "/Users/matt/Desktop/test.fas"
# Use capture.output without assigning to results
CalcD(alignment = alignment_file, sig.test = "N", ambig = "R", align.format = 'fasta')
alignment_file = "/Users/matt/Desktop/test.fas"
# Use capture.output without assigning to results
CalcD(alignment = alignment_file, sig.test = "N", ambig = "R", align.format = 'fasta')
library(ggplot2)
library(viridisLite)
library(svglite)
library(dplyr)
setwd("/Users/matt/Documents/Github/glasenapp_2024_manuscript/data/phylonet_hmm/output_visualizations/tracts_by_scaffold/")
# Read data from CSV file
gene_density_data <- read.csv("/Users/matt/Documents/GitHub/glasenapp_2024_manuscript/data/gene_density/chromosome_window_density.csv", header = FALSE, col.names = c("chromosome", "start", "end", "gene_density"))
# Create a data frame for plotting
df_gene_density <- gene_density_data %>%
mutate(chromosome = factor(chromosome, levels = unique(chromosome)))
# Calculate window centers
df_gene_density$window_center <- (df_gene_density$start + df_gene_density$end) / 2
mytheme <- theme_classic() + theme(
legend.position = "top",
axis.line = element_line(color = "black", size = 1.5),
axis.text = element_text(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 10, face = "bold", color = "black")
)
theme_set(mytheme)
# Read the bed file
bed_file <- "ten_kb_tracts_80.bed"
#bed_file <- "ten_kb_tracts.bed"
genes <- read.table(bed_file, sep = "\t", header = FALSE)
# Rename the columns
colnames(genes) <- c("chromosome", "start", "end", "gene_name")
# Read the gaps file
gap_file <- "100kb_gaps.bed"
gaps <- read.table(gap_file, sep = "\t", header = FALSE)
colnames(gaps) <- c("chromosome", "start", "end", "name")
# Read the scaffold lengths file
scaffold_lengths <- read.table("scaffold_info.txt", sep = "\t", header = FALSE)
# Rename the columns
colnames(scaffold_lengths) <- c("chromosome", "length", "gene_density")
# Order scaffold_lengths by gene_density in descending order
scaffold_lengths <- scaffold_lengths[order(scaffold_lengths$gene_density),]
scaffold_lengths$chromosome <- factor(scaffold_lengths$chromosome, levels = scaffold_lengths$chromosome)
# Create a new column in genes dataframe to represent the order of chromosomes
genes$order <- match(genes$chromosome, scaffold_lengths$chromosome)
# Sort genes by the order of chromosomes
genes <- genes[order(genes$order),]
# Remove the 'order' column if no longer needed
genes$order <- NULL
# Create a data frame for plotting
plot_data <- data.frame(
chromosome = factor(genes$chromosome, levels = scaffold_lengths$chromosome),
start = genes$start,
end = genes$end
)
# Create the plot
figure <- ggplot(plot_data) +
geom_blank(data = scaffold_lengths, aes(x = 0, y = chromosome)) +
geom_tile(data = df_gene_density, aes(x = window_center, y = chromosome, fill = gene_density),
width = df_gene_density$end - df_gene_density$start + 1, height = 0.2) +
geom_segment(
aes(x = start, xend = end, y = chromosome, yend = chromosome),
color = "black", linewidth = 5
) +
labs(x = "Position along Scaffold (base pairs)", y = "Scaffold") +
scale_x_continuous(labels = scales::comma) +
scale_fill_viridis_c(name = "Gene Density", option = "rocket") +
theme(
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black", linewidth = 0.5),
axis.text = element_text(size = 8),
axis.title = element_text(size = 16),
legend.position = "inside",
legend.justification = "right",
#legend.key.size = unit(0.5, "cm"),
)
figure
ggsave(filename = "/Users/matt/Desktop/figure_s3.pdf", plot = figure)
library(ggplot2)
library(viridisLite)
library(svglite)
library(dplyr)
setwd("/Users/matt/Documents/Github/glasenapp_2024_manuscript/data/phylonet_hmm/output_visualizations/tracts_by_scaffold/")
# Read data from CSV file
gene_density_data <- read.csv("/Users/matt/Documents/GitHub/glasenapp_2024_manuscript/data/gene_density/chromosome_window_density.csv", header = FALSE, col.names = c("chromosome", "start", "end", "gene_density"))
# Create a data frame for plotting
df_gene_density <- gene_density_data %>%
mutate(chromosome = factor(chromosome, levels = unique(chromosome)))
# Calculate window centers
df_gene_density$window_center <- (df_gene_density$start + df_gene_density$end) / 2
mytheme <- theme_classic() + theme(
legend.position = "top",
axis.line = element_line(color = "black", size = 1.5),
axis.text = element_text(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 10, face = "bold", color = "black")
)
theme_set(mytheme)
# Read the bed file
#bed_file <- "ten_kb_tracts_80.bed"
bed_file <- "ten_kb_tracts.bed"
genes <- read.table(bed_file, sep = "\t", header = FALSE)
# Rename the columns
colnames(genes) <- c("chromosome", "start", "end", "gene_name")
# Read the gaps file
gap_file <- "100kb_gaps.bed"
gaps <- read.table(gap_file, sep = "\t", header = FALSE)
colnames(gaps) <- c("chromosome", "start", "end", "name")
# Read the scaffold lengths file
scaffold_lengths <- read.table("scaffold_info.txt", sep = "\t", header = FALSE)
# Rename the columns
colnames(scaffold_lengths) <- c("chromosome", "length", "gene_density")
# Order scaffold_lengths by gene_density in descending order
scaffold_lengths <- scaffold_lengths[order(scaffold_lengths$gene_density),]
scaffold_lengths$chromosome <- factor(scaffold_lengths$chromosome, levels = scaffold_lengths$chromosome)
# Create a new column in genes dataframe to represent the order of chromosomes
genes$order <- match(genes$chromosome, scaffold_lengths$chromosome)
# Sort genes by the order of chromosomes
genes <- genes[order(genes$order),]
# Remove the 'order' column if no longer needed
genes$order <- NULL
# Create a data frame for plotting
plot_data <- data.frame(
chromosome = factor(genes$chromosome, levels = scaffold_lengths$chromosome),
start = genes$start,
end = genes$end
)
# Create the plot
figure <- ggplot(plot_data) +
geom_blank(data = scaffold_lengths, aes(x = 0, y = chromosome)) +
geom_tile(data = df_gene_density, aes(x = window_center, y = chromosome, fill = gene_density),
width = df_gene_density$end - df_gene_density$start + 1, height = 0.2) +
geom_segment(
aes(x = start, xend = end, y = chromosome, yend = chromosome),
color = "black", linewidth = 5
) +
labs(x = "Position along Scaffold (base pairs)", y = "Scaffold") +
scale_x_continuous(labels = scales::comma) +
scale_fill_viridis_c(name = "Gene Density", option = "rocket") +
theme(
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black", linewidth = 0.5),
axis.text = element_text(size = 8),
axis.title = element_text(size = 16),
legend.position = "inside",
legend.justification = "right",
#legend.key.size = unit(0.5, "cm"),
)
figure
ggsave(filename = "/Users/matt/Desktop/figure_2.pdf", plot = figure)
