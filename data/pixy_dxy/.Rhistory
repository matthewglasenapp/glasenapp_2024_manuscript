axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 11, color = "black"),  # Increase size and make bold
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.box = "horizontal",
axis.ticks.y = element_blank(),  # Remove y-axis ticks
legend.title = element_text()
)
library(ggplot2)
library(cowplot)
library(rjson)
library(dplyr)
library(tidyr)
library(ggnewscale)
library(RColorBrewer)
df_ebr1 <- read.csv('/Users/matt/Desktop/ebr1_converted_selected_sites.csv')
df_bindin <- read.csv('/Users/matt/Desktop/bindin_converted_selected_sites.csv')
df_domains <- read.table("/Users/matt/Documents/GitHub/urchin_grp/raw_data/ebr1_domains/ncbi_uniprot_domain_coordinates.txt", header = TRUE, sep = "\t")
df_ebr1_gaps <- read.table("/Users/matt/Desktop/ebr1_missing.txt", header = TRUE, sep = "\t")
df_bindin_gaps <- read.table("/Users/matt/Desktop/bindin_missing.txt", header = TRUE, sep = "\t")
#df_ebr1_exons <- read.table("/Users/matt/Documents/GitHub/urchin_grp/raw_data/EBR1_PAML_Filtered_exon_coordinates_unit_codon.txt", header = TRUE, sep = "\t")
df_bindin_exons <- read.table("/Users/matt/Desktop/bindin_spur_3_exon_coords.txt", header = TRUE, sep = "\t")
# Convert Domain to factor with levels in the desired order
df_domains$Domain <- factor(df_domains$domain, levels = unique(df_domains$domain))
introgression_probabilities = fromJSON(file= "/Users/matt/Documents/GitHub/urchin_grp/phylonet_hmm/bindin.json")
coordinates <- as.numeric(readLines("/Users/matt/Desktop/bindin_coordinates.txt"))
# Combine coordinates and introgression_probabilities into a data frame
introgression_df <- data.frame(coordinates = coordinates, introgression_probabilities = unlist(introgression_probabilities))
all_coords <- introgression_df %>%
summarise(coordinates = list(seq(min(coordinates), max(coordinates)))) %>%
unnest(coordinates)
result_df <- all_coords %>%
left_join(introgression_df, by = "coordinates")
# For EBR1
ebr1_introgression_probabilities = fromJSON(file= "/Users/matt/Documents/GitHub/urchin_grp/phylonet_hmm/ebr1.json")
ebr1_coordinates <- as.numeric(readLines("/Users/matt/Desktop/ebr1_coordinates.txt"))
# Combine coordinates and introgression_probabilities into a data frame
ebr1_introgression_df <- data.frame(coordinates = ebr1_coordinates, introgression_probabilities = unlist(ebr1_introgression_probabilities))
ebr1_all_coords <- ebr1_introgression_df %>%
summarise(coordinates = list(seq(min(coordinates), max(coordinates)))) %>%
unnest(coordinates)
ebr1_result_df <- ebr1_all_coords %>%
left_join(ebr1_introgression_df, by = "coordinates")
new_rows <- data.frame(coordinates = 11131:11136,
introgression_probabilities = NA)
# Append the new rows to ebr1_result_df
ebr1_result_df <- bind_rows(ebr1_result_df, new_rows)
ebr1_result_df <- ebr1_result_df %>%
mutate(coordinates = (coordinates * (1/3)) - (1/6))
df_plddt <- read.csv('/Users/matt/Documents/GitHub/urchin_grp/scripts/ebr1_alphafold/plddt_values.csv')
df_interface <- read.csv('/Users/matt/Desktop/interface.csv')
ebr1 <- ggplot(df_ebr1) +
geom_vline(xintercept = 2072, color = "black") +
geom_vline(xintercept = 2341, color = "black") +
geom_tile(data = ebr1_result_df, aes(x = coordinates, y = 0.65, fill = introgression_probabilities), width = 1, height = 0.1) +
scale_fill_viridis_c(name = "Introgression Probabilities", na.value = "white", option = "plasma") +
geom_tile(data = df_ebr1_gaps, aes(x = (start + stop) / 2, y = 0.3925, width = stop - start+1, height = 1.215), fill = "grey", alpha = 0.4) +
new_scale_fill() +
geom_tile(data = df_plddt, aes(x = site, y = 0.0, fill = plddt), width = 1, height = 0.1) +
scale_fill_viridis_c(name = "plddt", na.value = "white", option = "plasma") +
geom_point(data = df_ebr1, aes(x = site, y = method), color = df_ebr1$color, size = 2,shape=9) +
annotate("segment", x = 0, xend = 3712, y = 0.98, yend = 0.98, color = "black") +
#scale_fill_viridis_c(name = "Introgression Probabilities", na.value = "grey") +
new_scale_fill() +
geom_rect(data = df_domains, aes(xmin = start, xmax = stop, ymin = 0.96, ymax = 1.0, fill = Domain), color = "black", size = 0.2) +
scale_fill_viridis_d(breaks = levels(df_domains$Domain)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
#geom_rect(data = df_ebr1_exons, aes(xmin = start, xmax = stop, ymin = 0.9, ymax = 0.94), color = "black", size = 0.2, fill = "transparent") +
#geom_rect(data = df_gaps, aes(xmin = start, xmax = stop, ymin = -0.23, ymax = 1.02), color = "grey", size = 0.5, fill = "grey", alpha=0.2) +
#geom_text(data = df_ebr1_exons, aes(x = (start + stop) / 2, y = 0.92, label = exon), color = "black", size = 2, hjust = 0.5) +
scale_y_continuous(breaks = c(-0.2, 0, 0.2, 0.35, 0.5, 0.65, 0.8, 0.92), labels = c("FUBAR (-)", "plddt", "PAML", "Interface", "FUBAR (+)", "Introgress", "MEME", "Domain")) +
labs(title = "EBR1", x = "Amino Acid Site", y = "Selection Test") +
theme(
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 11, color = "black"),  # Increase size and make bold
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.box = "horizontal",
axis.ticks.y = element_blank(),  # Remove y-axis ticks
legend.title = element_text()
)
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(df_bindin)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
bindin_interface <- read.csv("/Users/matt/Desktop/bindin_interface.csv")
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = df_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
View(bindin_interface)
View(df_bindin)
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
ebr1
bindin <- ggplot(df_bindin) +
geom_tile(data = df_bindin_gaps, aes(x = (start + stop) / 2, y = 0.4, width = stop - start+1, height = 1.2), fill = "grey", alpha = 0.2) +
geom_line(aes(x = coordinates, y = introgression_probabilities), data = result_df, color = "blue", size=1) +
geom_point(data = df_bindin, aes(x = site, y = method), color = df_bindin$color, size = 2.5, shape = 9) +
geom_rect(data = df_bindin_exons, aes(xmin = start, xmax = stop, ymin = 1.0, ymax = 1.05), color = "black", size = 0.2, fill = "transparent") +
geom_text(data = df_bindin_exons, aes(x = (start + stop) / 2, y = 1.025, label = exon), color = "black", size = 4) +
geom_hline(yintercept = 0.9, linetype = "dashed", color = "grey50") +
scale_x_continuous(breaks = c(0, 132, 264, 396, 531, 663, 795, 927, 1059, 1191, 1323, 1443), labels = c("0", "44", "88", "132", "177", "221", "265", "309", "353", "397", "441", "481"), limits = c(1,1443)) +
geom_point(data = bindin_interface, aes(x = x, y = y), color = "black", size = 2, shape = 9) +
scale_y_continuous(sec.axis = sec_axis(~., name = "Selection Test", breaks = c(-0.2, 0.15, 0.2, 0.5, 0.8),
labels = c("FUBAR (-)", "interface", "PAML", "FUBAR (+)", "MEME")),
breaks = c(-0.2, 0.2, 0.4, 0.6),
labels = c("0", "0.3", "0.6", "0.9"),
limits = c(-0.2, 1.05)) +
labs(title = "bindin", x = "Amino Acid Site", y = "Introgression Probability") +
theme(
#panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y.left = element_text(size = 14),  # Primary y-axis
axis.title.y.right = element_text(size = 14),  # Secondary y-axis
axis.text.y.left = element_text(size = 10, color = "black"),  # Primary y-axis
axis.text.y.right = element_text(size = 10, color = "black"),  # Secondary y-axis
axis.line = element_line(color = "black", linewidth = 0.5),
axis.ticks.y.right = element_blank(),  # Remove y-axis ticks
legend.title = element_blank()
)
bindin
# Install and load required packages
library(ggtree)
install.packages("ggtree")
# Install and load required packages
library(ggtree)
install.packages("ggtree")
R
which R
library(ggplot2)
library(viridisLite)
library(svglite)
library(dplyr)
setwd("/Users/matt/Documents/Github/glasenapp_2024_manuscript/data/phylonet_hmm/output_visualizations/tracts_by_scaffold/")
# Read data from CSV file
gene_density_data <- read.csv("/Users/matt/Documents/GitHub/glasenapp_2024_manuscript/data/gene_density/chromosome_window_density.csv", header = FALSE, col.names = c("chromosome", "start", "end", "gene_density"))
# Create a data frame for plotting
df_gene_density <- gene_density_data %>%
mutate(chromosome = factor(chromosome, levels = unique(chromosome)))
# Calculate window centers
df_gene_density$window_center <- (df_gene_density$start + df_gene_density$end) / 2
mytheme <- theme_classic() + theme(
legend.position = "top",
axis.line = element_line(color = "black", size = 1.5),
axis.text = element_text(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 10, face = "bold", color = "black")
)
theme_set(mytheme)
# Read the bed file
bed_file <- "ten_kb_tracts_80.bed"
#bed_file <- "ten_kb_tracts_90.bed"
genes <- read.table(bed_file, sep = "\t", header = FALSE)
# Rename the columns
colnames(genes) <- c("chromosome", "start", "end", "gene_name")
# Read the gaps file
gap_file <- "100kb_gaps.bed"
gaps <- read.table(gap_file, sep = "\t", header = FALSE)
colnames(gaps) <- c("chromosome", "start", "end", "name")
# Read the scaffold lengths file
scaffold_lengths <- read.table("scaffold_info.txt", sep = "\t", header = FALSE)
# Rename the columns
colnames(scaffold_lengths) <- c("chromosome", "length", "gene_density")
# Order scaffold_lengths by gene_density in descending order
scaffold_lengths <- scaffold_lengths[order(scaffold_lengths$gene_density),]
scaffold_lengths$chromosome <- factor(scaffold_lengths$chromosome, levels = scaffold_lengths$chromosome)
# Create a new column in genes dataframe to represent the order of chromosomes
genes$order <- match(genes$chromosome, scaffold_lengths$chromosome)
# Sort genes by the order of chromosomes
genes <- genes[order(genes$order),]
# Remove the 'order' column if no longer needed
genes$order <- NULL
# Create a data frame for plotting
plot_data <- data.frame(
chromosome = factor(genes$chromosome, levels = scaffold_lengths$chromosome),
start = genes$start,
end = genes$end
)
# Create the plot
figure <- ggplot(plot_data) +
geom_blank(data = scaffold_lengths, aes(x = 0, y = chromosome)) +
geom_tile(data = df_gene_density, aes(x = window_center, y = chromosome, fill = gene_density),
width = df_gene_density$end - df_gene_density$start + 1, height = 0.2) +
geom_segment(
aes(x = start, xend = end, y = chromosome, yend = chromosome),
color = "black", linewidth = 5
) +
labs(x = "Position along Scaffold (base pairs)", y = "Scaffold") +
scale_x_continuous(labels = scales::comma) +
scale_fill_viridis_c(name = "Gene Density", option = "rocket") +
theme(
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black", linewidth = 0.5),
axis.text = element_text(size = 8),
axis.title = element_text(size = 16),
legend.position = "inside",
legend.justification = "right",
#legend.key.size = unit(0.5, "cm"),
)
figure
ggsave(filename = "/Users/matt/Desktop/test.svg", plot = figure)
library(ggplot2)
library(viridisLite)
library(svglite)
library(dplyr)
setwd("/Users/matt/Documents/Github/glasenapp_2024_manuscript/data/phylonet_hmm/output_visualizations/tracts_by_scaffold/")
# Read data from CSV file
gene_density_data <- read.csv("/Users/matt/Documents/GitHub/glasenapp_2024_manuscript/data/gene_density/chromosome_window_density.csv", header = FALSE, col.names = c("chromosome", "start", "end", "gene_density"))
# Create a data frame for plotting
df_gene_density <- gene_density_data %>%
mutate(chromosome = factor(chromosome, levels = unique(chromosome)))
# Calculate window centers
df_gene_density$window_center <- (df_gene_density$start + df_gene_density$end) / 2
mytheme <- theme_classic() + theme(
legend.position = "top",
axis.line = element_line(color = "black", size = 1.5),
axis.text = element_text(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 10, face = "bold", color = "black")
)
theme_set(mytheme)
# Read the bed file
#bed_file <- "ten_kb_tracts_80.bed"
bed_file <- "ten_kb_tracts_90.bed"
genes <- read.table(bed_file, sep = "\t", header = FALSE)
# Rename the columns
colnames(genes) <- c("chromosome", "start", "end", "gene_name")
# Read the gaps file
gap_file <- "100kb_gaps.bed"
gaps <- read.table(gap_file, sep = "\t", header = FALSE)
colnames(gaps) <- c("chromosome", "start", "end", "name")
# Read the scaffold lengths file
scaffold_lengths <- read.table("scaffold_info.txt", sep = "\t", header = FALSE)
# Rename the columns
colnames(scaffold_lengths) <- c("chromosome", "length", "gene_density")
# Order scaffold_lengths by gene_density in descending order
scaffold_lengths <- scaffold_lengths[order(scaffold_lengths$gene_density),]
scaffold_lengths$chromosome <- factor(scaffold_lengths$chromosome, levels = scaffold_lengths$chromosome)
# Create a new column in genes dataframe to represent the order of chromosomes
genes$order <- match(genes$chromosome, scaffold_lengths$chromosome)
# Sort genes by the order of chromosomes
genes <- genes[order(genes$order),]
# Remove the 'order' column if no longer needed
genes$order <- NULL
# Create a data frame for plotting
plot_data <- data.frame(
chromosome = factor(genes$chromosome, levels = scaffold_lengths$chromosome),
start = genes$start,
end = genes$end
)
# Create the plot
figure <- ggplot(plot_data) +
geom_blank(data = scaffold_lengths, aes(x = 0, y = chromosome)) +
geom_tile(data = df_gene_density, aes(x = window_center, y = chromosome, fill = gene_density),
width = df_gene_density$end - df_gene_density$start + 1, height = 0.2) +
geom_segment(
aes(x = start, xend = end, y = chromosome, yend = chromosome),
color = "black", linewidth = 5
) +
labs(x = "Position along Scaffold (base pairs)", y = "Scaffold") +
scale_x_continuous(labels = scales::comma) +
scale_fill_viridis_c(name = "Gene Density", option = "rocket") +
theme(
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black", linewidth = 0.5),
axis.text = element_text(size = 8),
axis.title = element_text(size = 16),
legend.position = "inside",
legend.justification = "right",
#legend.key.size = unit(0.5, "cm"),
)
figure
ggsave(filename = "/Users/matt/Desktop/test.svg", plot = figure)
library(ggplot2)
library(viridisLite)
library(svglite)
library(dplyr)
setwd("/Users/matt/Documents/Github/glasenapp_2024_manuscript/data/phylonet_hmm/output_visualizations/tracts_by_scaffold/")
# Read data from CSV file
gene_density_data <- read.csv("/Users/matt/Documents/GitHub/glasenapp_2024_manuscript/data/gene_density/chromosome_window_density.csv", header = FALSE, col.names = c("chromosome", "start", "end", "gene_density"))
# Create a data frame for plotting
df_gene_density <- gene_density_data %>%
mutate(chromosome = factor(chromosome, levels = unique(chromosome)))
# Calculate window centers
df_gene_density$window_center <- (df_gene_density$start + df_gene_density$end) / 2
mytheme <- theme_classic() + theme(
legend.position = "top",
axis.line = element_line(color = "black", size = 1.5),
axis.text = element_text(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(size = 10, face = "bold", color = "black")
)
theme_set(mytheme)
# Read the bed file
bed_file <- "ten_kb_tracts_80.bed"
#bed_file <- "ten_kb_tracts_90.bed"
genes <- read.table(bed_file, sep = "\t", header = FALSE)
# Rename the columns
colnames(genes) <- c("chromosome", "start", "end", "gene_name")
# Read the gaps file
gap_file <- "100kb_gaps.bed"
gaps <- read.table(gap_file, sep = "\t", header = FALSE)
colnames(gaps) <- c("chromosome", "start", "end", "name")
# Read the scaffold lengths file
scaffold_lengths <- read.table("scaffold_info.txt", sep = "\t", header = FALSE)
# Rename the columns
colnames(scaffold_lengths) <- c("chromosome", "length", "gene_density")
# Order scaffold_lengths by gene_density in descending order
scaffold_lengths <- scaffold_lengths[order(scaffold_lengths$gene_density),]
scaffold_lengths$chromosome <- factor(scaffold_lengths$chromosome, levels = scaffold_lengths$chromosome)
# Create a new column in genes dataframe to represent the order of chromosomes
genes$order <- match(genes$chromosome, scaffold_lengths$chromosome)
# Sort genes by the order of chromosomes
genes <- genes[order(genes$order),]
# Remove the 'order' column if no longer needed
genes$order <- NULL
# Create a data frame for plotting
plot_data <- data.frame(
chromosome = factor(genes$chromosome, levels = scaffold_lengths$chromosome),
start = genes$start,
end = genes$end
)
# Create the plot
figure <- ggplot(plot_data) +
geom_blank(data = scaffold_lengths, aes(x = 0, y = chromosome)) +
geom_tile(data = df_gene_density, aes(x = window_center, y = chromosome, fill = gene_density),
width = df_gene_density$end - df_gene_density$start + 1, height = 0.2) +
geom_segment(
aes(x = start, xend = end, y = chromosome, yend = chromosome),
color = "black", linewidth = 5
) +
labs(x = "Position along Scaffold (base pairs)", y = "Scaffold") +
scale_x_continuous(labels = scales::comma) +
scale_fill_viridis_c(name = "Gene Density", option = "rocket") +
theme(
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black", linewidth = 0.5),
axis.text = element_text(size = 8),
axis.title = element_text(size = 16),
legend.position = "inside",
legend.justification = "right",
#legend.key.size = unit(0.5, "cm"),
)
figure
ggsave(filename = "/Users/matt/Desktop/test.svg", plot = figure)
library(ggplot2)
library(tidyr)
library(dplyr)
setwd("/Users/matt/Documents/GitHub/glasenapp_2024_manuscript/data/pixy_dxy/")
# 90% posterior probability threshold
#-------------------------------------------------------------------------------
# Load the csv files containing the distribution of mean dXY values and read as a one-dimensional vector
dxy_dist_file_90 = "dxy_dist_90.csv"
dxy_dist_90 = read.csv(dxy_dist_file_90)
num_items = length(dxy_dist_90$introgression_tract)
df_dxy_90 <- pivot_longer(dxy_dist_90, cols = c(introgression_tract, species_tree_tract), names_to = "dist_type", values_to = "divergence")
df_dxy_90 <- df_dxy_90 %>% arrange(dist_type)
mean_values <- aggregate(divergence ~ dist_type, df_dxy_90, mean)
dxy_90 <- ggplot(data = df_dxy_90, aes(x = divergence, color = dist_type)) +
stat_density(geom="line",position="identity", size = 1.1) +
geom_vline(data = mean_values, aes(xintercept = divergence, linetype = dist_type, color = dist_type),
linetype = "dashed", size = 0.7, show.legend = FALSE) +
geom_text(data = mean_values, aes(x = divergence, label = round(divergence, 3), y = 0.0, color = dist_type), vjust = 0.0, hjust = -0.1, show.legend = FALSE, size = 4) +
scale_color_manual(values = c("introgression_tract" = "#1F78B4", "species_tree_tract" = "#333333"),
labels = c("introgression_tract" = "Introgression Tracts", "species_tree_tract" = "Genome-Wide Background")) +
labs(
x = "Absolute Nucleotide Divergence (dXY)",
y = "Probability Density",
color = "Dist Type"
) +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size =16),
axis.title.y = element_text(size = 16),
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text = element_text(size = 14)
) +
scale_x_continuous(expand = expansion(mult = c(0.09, 0.09))) +
guides(color = guide_legend(title = NULL))
dxy_90
# Display the plot
ggsave(filename = "/Users/matt/Desktop/figure_3.pdf", plot = dxy_90)
