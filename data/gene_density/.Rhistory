block.size = 100, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 50, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 50, replicate = 100, align.format='fasta')
library(devtools)
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
30.8
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
knitr::opts_chunk$set(echo = TRUE)
introgression_tract_dN_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_introgression_tract_90.csv"
species_tree_tract_dN_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_species_tree_90.csv"
introgression_tract_dS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_introgression_tract_90.csv"
species_tree_tract_dS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_species_tree_90.csv"
introgression_tract_dNdS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_introgression_tract_90.csv"
species_tree_tract_dNdS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_species_tree_90.csv"
introgression_tract_dN_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_introgression_tract_80.csv"
species_tree_tract_dN_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_species_tree_80.csv"
introgression_tract_dS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_introgression_tract_80.csv"
species_tree_tract_dS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_species_tree_80.csv"
introgression_tract_dNdS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_introgression_tract_80.csv"
species_tree_tract_dNdS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_species_tree_80.csv"
# Read the CSV file as a one-dimensional vector
dist_dN_introgression_tract_90 <- scan(introgression_tract_dN_90, what = numeric(), sep = ",")
dist_dN_species_tree_90 <- scan(species_tree_tract_dN_90, what = numeric(), sep = ",")
dist_dS_introgression_tract_90 <- scan(introgression_tract_dS_90, what = numeric(), sep = ",")
dist_dS_species_tree_90 <- scan(species_tree_tract_dS_90, what = numeric(), sep = ",")
dist_dNdS_introgression_tract_90 <- scan(introgression_tract_dNdS_90, what = numeric(), sep = ",")
dist_dNdS_species_tree_90 <- scan(species_tree_tract_dNdS_90, what = numeric(), sep = ",")
dist_dN_introgression_tract_80 <- scan(introgression_tract_dN_80, what = numeric(), sep = ",")
dist_dN_species_tree_80 <- scan(species_tree_tract_dN_80, what = numeric(), sep = ",")
dist_dS_introgression_tract_80 <- scan(introgression_tract_dS_80, what = numeric(), sep = ",")
dist_dS_species_tree_80 <- scan(species_tree_tract_dS_80, what = numeric(), sep = ",")
dist_dNdS_introgression_tract_80 <- scan(introgression_tract_dNdS_80, what = numeric(), sep = ",")
dist_dNdS_species_tree_80 <- scan(species_tree_tract_dNdS_80, what = numeric(), sep = ",")
df_paml <- data.frame(
dist_type = factor(c(rep("introgression_tract", 1000), rep("species_tree_tract", 1000), rep("introgression_tract", 1000), rep("species_tree_tract", 1000))),
mean_dN = c(dist_dN_introgression_tract_90, dist_dN_species_tree_90, dist_dN_introgression_tract_80, dist_dN_species_tree_80),
mean_dS = c(dist_dS_introgression_tract_90, dist_dS_species_tree_90, dist_dS_introgression_tract_80, dist_dS_species_tree_80),
mean_dNdS = c(dist_dNdS_introgression_tract_90, dist_dNdS_species_tree_90, dist_dNdS_introgression_tract_80, dist_dNdS_species_tree_80),
posterior_probability = factor(c(rep("probability_90", 2000), rep("probability_80", 2000)))
)
# Convert data to long format
df_paml_long <- df_paml %>% pivot_longer(cols = c(mean_dN, mean_dS, mean_dNdS),
names_to = "metric",
values_to = "value")
library(sjPlot)
library(fitdistrplus)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(fitdistrplus)
library(knitr)
library(tidyr)
library(ggh4x)
library(scales)
df_paml <- data.frame(
dist_type = factor(c(rep("introgression_tract", 1000), rep("species_tree_tract", 1000), rep("introgression_tract", 1000), rep("species_tree_tract", 1000))),
mean_dN = c(dist_dN_introgression_tract_90, dist_dN_species_tree_90, dist_dN_introgression_tract_80, dist_dN_species_tree_80),
mean_dS = c(dist_dS_introgression_tract_90, dist_dS_species_tree_90, dist_dS_introgression_tract_80, dist_dS_species_tree_80),
mean_dNdS = c(dist_dNdS_introgression_tract_90, dist_dNdS_species_tree_90, dist_dNdS_introgression_tract_80, dist_dNdS_species_tree_80),
posterior_probability = factor(c(rep("probability_90", 2000), rep("probability_80", 2000)))
)
# Convert data to long format
df_paml_long <- df_paml %>% pivot_longer(cols = c(mean_dN, mean_dS, mean_dNdS),
names_to = "metric",
values_to = "value")
# Reorder the levels of the metric variable
df_paml_long$metric <- factor(df_paml_long$metric, levels = c("mean_dN", "mean_dS", "mean_dNdS"))
# Reorder the levels of the metric variable
df_paml_long$posterior_probability <- factor(df_paml_long$posterior_probability, levels = c("probability_90", "probability_80"))
fit.norm_introgressed_genes_90 = fitdist(df_coding$base_count[df_coding$dist_type == "introgression_tract" & df_coding$posterior_probability == "probability_90"], "norm")
# Add one-dimensional vectors of mean dXY values to a dataframe called df
df_coding <- data.frame(
dist_type = factor(c(rep("introgression_tract", 1000), rep("species_tree_tract", 1000), rep("introgression_tract", 1000), rep("species_tree_tract", 1000))),
base_count = c(dist_introgression_tract_bases_90, dist_species_tree_tract_bases_90, dist_introgression_tract_bases_80, dist_species_tree_tract_bases_80),
posterior_probability = factor(c(rep("probability_90", 2000), rep("probability_80", 2000)))
)
# Define the csv files with list of base counts at 90% posterior probability threshold
introgression_tract_base_count_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/introgression_tract_base_count_90.csv"
species_tree_tract_base_count_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/species_tree_tract_base_count_90.csv"
# Define the csv files with list of base counts at 80% posterior probability threshold
introgression_tract_base_count_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/introgression_tract_base_count_80.csv"
species_tree_tract_base_count_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/species_tree_tract_base_count_80.csv"
# Read the CSV file as a one-dimensional vector
dist_introgression_tract_bases_90 <- scan(introgression_tract_base_count_90, what = numeric(), sep = ",")
dist_species_tree_tract_bases_90 <- scan(species_tree_tract_base_count_90, what = numeric(), sep = ",")
dist_introgression_tract_bases_80 <- scan(introgression_tract_base_count_80, what = numeric(), sep = ",")
dist_species_tree_tract_bases_80 <- scan(species_tree_tract_base_count_80, what = numeric(), sep = ",")
total_bases_90 = 3747392
total_bases_80 = 21820425
dist_introgression_tract_bases_90 <- dist_introgression_tract_bases_90 / total_bases_90 * 100
dist_introgression_tract_bases_80 <- dist_introgression_tract_bases_80 / total_bases_80 * 100
dist_species_tree_tract_bases_90 <- dist_species_tree_tract_bases_90 / total_bases_90 * 100
dist_species_tree_tract_bases_80 <- dist_species_tree_tract_bases_80 / total_bases_80 * 100
# Add one-dimensional vectors of mean dXY values to a dataframe called df
df_coding <- data.frame(
dist_type = factor(c(rep("introgression_tract", 1000), rep("species_tree_tract", 1000), rep("introgression_tract", 1000), rep("species_tree_tract", 1000))),
base_count = c(dist_introgression_tract_bases_90, dist_species_tree_tract_bases_90, dist_introgression_tract_bases_80, dist_species_tree_tract_bases_80),
posterior_probability = factor(c(rep("probability_90", 2000), rep("probability_80", 2000)))
)
# Reorder levels of posterior_probability
df_coding$posterior_probability <- factor(df_coding$posterior_probability, levels = c("probability_90", "probability_80"))
fit.norm_introgressed_genes_90 = fitdist(df_coding$base_count[df_coding$dist_type == "introgression_tract" & df_coding$posterior_probability == "probability_90"], "norm")
plot(fit.norm_introgressed_genes_90)
fit.norm_species_tree_genes_90 = fitdist(df_coding$base_count[df_coding$dist_type == "species_tree_tract" & df_coding$posterior_probability == "probability_90"], "norm")
plot(fit.norm_species_tree_genes_90)
fit.norm_introgressed_genes_80 = fitdist(df_coding$base_count[df_coding$dist_type == "introgression_tract" & df_coding$posterior_probability == "probability_80"], "norm")
plot(fit.norm_introgressed_genes_80)
fit.norm_species_tree_genes_80 = fitdist(df_coding$base_count[df_coding$dist_type == "species_tree_tract" & df_coding$posterior_probability == "probability_80"], "norm")
plot(fit.norm_species_tree_genes_80)
result_coding <- df_coding %>%
group_by(dist_type, posterior_probability) %>%
summarise(sd_base_count = sd(base_count),
variance_base_count = sd_base_count^2,
.groups = "drop") %>%
arrange(posterior_probability)
# Rename the variables for the table
result_coding <- result_coding %>%
rename(
"Standard Deviation" = sd_base_count,
"Variance" = variance_base_count,
"Posterior Probability" = posterior_probability,
"Tract Type" = dist_type
)
# Create vectors to rename values within the table
dist_type_rename_base_count <- c("introgression_tract" = "Introgression", "species_tree_tract" = "Species Tree")
posterior_probability_rename_base_count <- c("probability_90" = "90%", "probability_80" = "80%")
# Apply the renaming to the data frame
result <- result_coding %>%
mutate(
`Tract Type` = case_when(
`Tract Type` %in% names(dist_type_rename_base_count) ~ dist_type_rename_base_count[`Tract Type`],
TRUE ~ as.character(`Tract Type`)
),
`Posterior Probability` = case_when(
`Posterior Probability` %in% names(posterior_probability_rename_base_count) ~ posterior_probability_rename_base_count[`Posterior Probability`],
TRUE ~ as.character(`Posterior Probability`)
)
)
# Print the kable table with customized values
knitr::kable(result, digits = 8, align = "c", format.args = list(scientific = FALSE))
# Perform variance tests
var_test_90_coding <- var.test(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_90"],
df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability == "probability_90"])
var_test_80_coding <- var.test(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_80"],
df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability == "probability_80"])
log_var_test_90_coding <- var.test(log(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_90"]),
log(df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability == "probability_90"]))
log_var_test_80_coding <- var.test(log(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_80"]),
log(df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability ==
"probability_80"]))
# Function to format the confidence interval with three digits
format_confidence_interval <- function(conf.int) {
return(sprintf("[%.3f, %.3f]", conf.int[1], conf.int[2]))
}
# Calculate the ratio of variances
ratio_of_variances_coding <- c(var_test_90_coding$estimate, var_test_80_coding$estimate, log_var_test_90_coding$estimate, log_var_test_80_coding$estimate)
# Create a data frame with test results, including the variance ratio
results_coding <- data.frame(
"Posterior Probability" = c("90%", "80%", "log(90%)", "log(80%)"),
"Variance Ratio" = ratio_of_variances_coding,
"p value" = c(var_test_90_coding$p.value, var_test_80_coding$p.value, log_var_test_90_coding$p.value, log_var_test_80_coding$p.value),
"Confidence Interval" = sapply(list(var_test_90_coding$conf.int, var_test_80_coding$conf.int, log_var_test_90_codingy$conf.int, log_var_test_80_coding$conf.int), format_confidence_interval)
)
# Perform variance tests
var_test_90_coding <- var.test(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_90"],
df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability == "probability_90"])
var_test_80_coding <- var.test(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_80"],
df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability == "probability_80"])
log_var_test_90_coding <- var.test(log(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_90"]),
log(df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability == "probability_90"]))
log_var_test_80_coding <- var.test(log(df_coding$base_count[df_coding$dist_type == "introgression_tract" &
df_coding$posterior_probability == "probability_80"]),
log(df_coding$base_count[df_coding$dist_type == "species_tree_tract" &
df_coding$posterior_probability ==
"probability_80"]))
# Function to format the confidence interval with three digits
format_confidence_interval <- function(conf.int) {
return(sprintf("[%.3f, %.3f]", conf.int[1], conf.int[2]))
}
# Calculate the ratio of variances
ratio_of_variances_coding <- c(var_test_90_coding$estimate, var_test_80_coding$estimate, log_var_test_90_coding$estimate, log_var_test_80_coding$estimate)
# Create a data frame with test results, including the variance ratio
results_coding <- data.frame(
"Posterior Probability" = c("90%", "80%", "log(90%)", "log(80%)"),
"Variance Ratio" = ratio_of_variances_coding,
"p value" = c(var_test_90_coding$p.value, var_test_80_coding$p.value, log_var_test_90_coding$p.value, log_var_test_80_coding$p.value),
"Confidence Interval" = sapply(list(var_test_90_coding$conf.int, var_test_80_coding$conf.int, log_var_test_90_coding$conf.int, log_var_test_80_coding$conf.int), format_confidence_interval)
)
# Create a knitr table
kable(results_coding, format = "markdown", digits = 3, align ="c", col.names = c("Posterior Probability", "Variance Ratio", "p", "Confidence Interval"))
result_coding <- df_coding %>%
group_by(dist_type, posterior_probability) %>%
summarise(sd_base_count = sd(base_count),
variance_base_count = sd_base_count^2,
.groups = "drop") %>%
arrange(posterior_probability)
# Rename the variables for the table
result_coding <- result_coding %>%
rename(
"Standard Deviation" = sd_base_count,
"Variance" = variance_base_count,
"Posterior Probability" = posterior_probability,
"Tract Type" = dist_type
)
# Create vectors to rename values within the table
dist_type_rename_base_count <- c("introgression_tract" = "Introgression", "species_tree_tract" = "Species Tree")
posterior_probability_rename_base_count <- c("probability_90" = "90%", "probability_80" = "80%")
# Apply the renaming to the data frame
result <- result_coding %>%
mutate(
`Tract Type` = case_when(
`Tract Type` %in% names(dist_type_rename_base_count) ~ dist_type_rename_base_count[`Tract Type`],
TRUE ~ as.character(`Tract Type`)
),
`Posterior Probability` = case_when(
`Posterior Probability` %in% names(posterior_probability_rename_base_count) ~ posterior_probability_rename_base_count[`Posterior Probability`],
TRUE ~ as.character(`Posterior Probability`)
)
)
# Print the kable table with customized values
knitr::kable(result, digits = 8, align = "c", format.args = list(scientific = FALSE))
subset_90_coding = df_coding[df_coding$posterior_probability == "probability_90", ]
results_90_coding <- t.test(base_count~dist_type, data=subset_90_coding, paired=FALSE, var.eq=F, alternative="two.sided")
subset_80_coding = df_coding[df_coding$posterior_probability == "probability_80", ]
results_80_coding <- t.test(base_count~dist_type, data=subset_80_coding, paired=FALSE, var.eq=T, alternative="two.sided")
# Create a data frame to store the t-test results
t_test_results_coding <- data.frame(
posterior_probability = c("90%", "80%"),
t = c(results_90_coding$statistic, results_80_coding$statistic),
df = c(results_90_coding$parameter, results_80_coding$parameter),
p_value = c(results_90_coding$p.value, results_80_coding$p.value),
conf_interval = c(paste0("[", round(results_90_coding$conf.int[1], 4), ", ", round(results_90_coding$conf.int[2], 4), "]"),
paste0("[", round(results_80_coding$conf.int[1], 4), ", ", round(results_80_coding$conf.int[2], 4), "]")
)
)
# Create a kable table
kable(t_test_results_coding, format = "markdown", align = "c", digits = 3, col.names = c("Posterior Probability", "t", "df", "p", "Confidence Interval"))
# Define the csv files with list of gene and base countscounts
introgression_tract_psg_count_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/introgression_tract_psg_count_90.csv"
species_tree_tract_psg_count_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/species_tree_tract_psg_count_90.csv"
introgression_tract_psg_count_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/introgression_tract_psg_count_80.csv"
species_tree_tract_psg_count_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/species_tree_tract_psg_count_80.csv"
# Read the CSV file as a one-dimensional vector
dist_introgression_tract_psg_90 <- scan(introgression_tract_psg_count_90, what = numeric(), sep = ",")
dist_species_tree_tract_psg_90 <- scan(species_tree_tract_psg_count_90, what = numeric(), sep = ",")
dist_introgression_tract_psg_80 <- scan(introgression_tract_psg_count_80, what = numeric(), sep = ",")
dist_species_tree_tract_psg_80 <- scan(species_tree_tract_psg_count_80, what = numeric(), sep = ",")
mb_90 = 3.747392
mb_80 = 21.820425
dist_introgression_tract_psg_90 <- dist_introgression_tract_psg_90 / mb_90
dist_species_tree_tract_psg_90 <- dist_species_tree_tract_psg_90 / mb_90
dist_introgression_tract_psg_80 <- dist_introgression_tract_psg_80 / mb_80
dist_species_tree_tract_psg_80 <- dist_species_tree_tract_psg_80 / mb_80
df_psg <- data.frame(
dist_type = factor(c(rep("introgression_tract", 1000), rep("species_tree_tract", 1000), rep("introgression_tract", 1000), rep("species_tree_tract", 1000))),
psg_count = c(dist_introgression_tract_psg_90, dist_species_tree_tract_psg_90, dist_introgression_tract_psg_80, dist_species_tree_tract_psg_80),
posterior_probability = factor(c(rep("probability_90", 2000), rep("probability_80", 2000)))
)
# Reorder levels of posterior_probability
df_psg$posterior_probability <- factor(df_psg$posterior_probability, levels = c("probability_90", "probability_80"))
fit.norm_introgressed_genes_90 = fitdist(df_psg$psg_count[df_psg$dist_type == "introgression_tract" & df_psg$posterior_probability == "probability_90"], "norm")
plot(fit.norm_introgressed_genes_90)
fit.norm_species_tree_genes_90 = fitdist(df_psg$psg_count[df_psg$dist_type == "species_tree_tract" & df_psg$posterior_probability == "probability_90"], "norm")
plot(fit.norm_species_tree_genes_90)
fit.norm_introgressed_genes_80 = fitdist(df_psg$psg_count[df_psg$dist_type == "introgression_tract" & df_psg$posterior_probability == "probability_80"], "norm")
plot(fit.norm_introgressed_genes_80)
fit.norm_species_tree_genes_80 = fitdist(df_psg$psg_count[df_psg$dist_type == "species_tree_tract" & df_psg$posterior_probability == "probability_80"], "norm")
plot(fit.norm_species_tree_genes_80)
fit.lnorm_introgressed_genes_90 = fitdist(df_psg$psg_count[df_psg$dist_type == "introgression_tract" & df_psg$posterior_probability == "probability_90"], "lnorm")
View(df_psg)
# Create a data frame to store the t-test results
psg_count_aic <- data.frame(
tract_type = c("Introgression", "Introgression", "Species Tree","Species Tree"),
posterior_probability = c("90%", "80%", "90%", "80%"),
fit = c("Normal", "Normal", "Normal", "Normal"),
aic = c(fit.norm_introgressed_genes_90$aic, fit.norm_introgressed_genes_80$aic, fit.norm_species_tree_genes_90$aic, fit.norm_species_tree_genes_90$aic))
# Create a kable table
kable(psg_count_aic, format = "markdown", align = "c", digits = 1, col.names = c("Tract Type", "Posterior Probability", "Fit", "aic"))
result_psg <- df_psg %>%
group_by(dist_type, posterior_probability) %>%
summarise(sd_psg_count = sd(psg_count),
variance_psg_count = sd_psg_count^2,
.groups = "drop") %>%
arrange(posterior_probability)
# Rename the variables for the table
result_psg <- result_psg %>%
rename(
"Standard Deviation" = sd_psg_count,
"Variance" = variance_psg_count,
"Posterior Probability" = posterior_probability,
"Tract Type" = dist_type
)
# Create vectors to rename values within the table
dist_type_rename_psg_count <- c("introgression_tract" = "Introgression", "species_tree_tract" = "Species Tree")
posterior_probability_rename_psg_count <- c("probability_90" = "90%", "probability_80" = "80%")
# Apply the renaming to the data frame
result <- result_psg %>%
mutate(
`Tract Type` = case_when(
`Tract Type` %in% names(dist_type_rename_psg_count) ~ dist_type_rename_psg_count[`Tract Type`],
TRUE ~ as.character(`Tract Type`)
),
`Posterior Probability` = case_when(
`Posterior Probability` %in% names(posterior_probability_rename_psg_count) ~ posterior_probability_rename_psg_count[`Posterior Probability`],
TRUE ~ as.character(`Posterior Probability`)
)
)
# Print the kable table with customized values
knitr::kable(result, digits = 8, align = "c", format.args = list(scientific = FALSE))
# Perform variance tests
var_test_90_psg <- var.test(df_psg$psg_count[df_psg$dist_type == "introgression_tract" &
df_psg$posterior_probability == "probability_90"],
df_psg$psg_count[df_psg$dist_type == "species_tree_tract" &
df_psg$posterior_probability == "probability_90"])
var_test_80_psg <- var.test(df_psg$psg_count[df_psg$dist_type == "introgression_tract" &
df_psg$posterior_probability == "probability_80"],
df_psg$psg_count[df_psg$dist_type == "species_tree_tract" &
df_psg$posterior_probability == "probability_80"])
log_var_test_90_psg <- var.test(log(df_psg$psg_count[df_psg$dist_type == "introgression_tract" &
df_psg$posterior_probability == "probability_90"]),
log(df_psg$psg_count[df_psg$dist_type == "species_tree_tract" &
df_psg$posterior_probability == "probability_90"]))
log_var_test_80_psg <- var.test(log(df_psg$psg_count[df_psg$dist_type == "introgression_tract" &
df_psg$posterior_probability == "probability_80"]),
log(df_psg$psg_count[df_psg$dist_type == "species_tree_tract" &
df_psg$posterior_probability ==
"probability_80"]))
# Function to format the confidence interval with three digits
format_confidence_interval <- function(conf.int) {
return(sprintf("[%.3f, %.3f]", conf.int[1], conf.int[2]))
}
# Calculate the ratio of variances
ratio_of_variances_psg <- c(var_test_90_psg$estimate, var_test_80_psg$estimate, log_var_test_90_psg$estimate, log_var_test_80_psg$estimate)
# Create a data frame with test results, including the variance ratio
results_psg <- data.frame(
"Posterior Probability" = c("90%", "80%", "log(90%)", "log(80%)"),
"Variance Ratio" = ratio_of_variances_psg,
"p value" = c(var_test_90_psg$p.value, var_test_80_psg$p.value, log_var_test_90_psg$p.value, log_var_test_80_psg$p.value),
"Confidence Interval" = sapply(list(var_test_90_psg$conf.int, var_test_80_psg$conf.int, log_var_test_90_psg$conf.int, log_var_test_80_psg$conf.int), format_confidence_interval)
)
# Create a knitr table
kable(results_psg, format = "markdown", digits = 3, align ="c", col.names = c("Posterior Probability", "Variance Ratio", "p", "Confidence Interval"))
subset_90_psg = df_psg[df_psg$posterior_probability == "probability_90", ]
results_90_psg <- t.test(psg_count~dist_type, data=subset_90_psg, paired=FALSE, var.eq=F, alternative="two.sided")
subset_80_psg = df_psg[df_psg$posterior_probability == "probability_80", ]
results_80_psg <- t.test(psg_count~dist_type, data=subset_80_psg, paired=FALSE, var.eq=T, alternative="two.sided")
# Create a data frame to store the t-test results
t_test_results_psg <- data.frame(
posterior_probability = c("90%", "80%"),
t = c(results_90_psg$statistic, results_80_psg$statistic),
df = c(results_90_psg$parameter, results_80_psg$parameter),
p_value = c(results_90_psg$p.value, results_80_psg$p.value),
conf_interval = c(paste0("[", round(results_90_psg$conf.int[1], 4), ", ", round(results_90_psg$conf.int[2], 4), "]"),
paste0("[", round(results_80_psg$conf.int[1], 4), ", ", round(results_80_psg$conf.int[2], 4), "]")
)
)
# Create a kable table
kable(t_test_results_psg, format = "markdown", align = "c", digits = 3, col.names = c("Posterior Probability", "t", "df", "p", "Confidence Interval"))
introgression_tract_dN_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_introgression_tract_90.csv"
species_tree_tract_dN_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_species_tree_90.csv"
introgression_tract_dS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_introgression_tract_90.csv"
species_tree_tract_dS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_species_tree_90.csv"
introgression_tract_dNdS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_introgression_tract_90.csv"
species_tree_tract_dNdS_90 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_species_tree_90.csv"
introgression_tract_dN_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_introgression_tract_80.csv"
species_tree_tract_dN_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dN_species_tree_80.csv"
introgression_tract_dS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_introgression_tract_80.csv"
species_tree_tract_dS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dS_species_tree_80.csv"
introgression_tract_dNdS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_introgression_tract_80.csv"
species_tree_tract_dNdS_80 = "/Users/matt/Documents/Github/dissertation_chapter_2/data/paml/mean_dNdS_species_tree_80.csv"
# Read the CSV file as a one-dimensional vector
dist_dN_introgression_tract_90 <- scan(introgression_tract_dN_90, what = numeric(), sep = ",")
dist_dN_species_tree_90 <- scan(species_tree_tract_dN_90, what = numeric(), sep = ",")
dist_dS_introgression_tract_90 <- scan(introgression_tract_dS_90, what = numeric(), sep = ",")
dist_dS_species_tree_90 <- scan(species_tree_tract_dS_90, what = numeric(), sep = ",")
dist_dNdS_introgression_tract_90 <- scan(introgression_tract_dNdS_90, what = numeric(), sep = ",")
dist_dNdS_species_tree_90 <- scan(species_tree_tract_dNdS_90, what = numeric(), sep = ",")
dist_dN_introgression_tract_80 <- scan(introgression_tract_dN_80, what = numeric(), sep = ",")
dist_dN_species_tree_80 <- scan(species_tree_tract_dN_80, what = numeric(), sep = ",")
dist_dS_introgression_tract_80 <- scan(introgression_tract_dS_80, what = numeric(), sep = ",")
dist_dS_species_tree_80 <- scan(species_tree_tract_dS_80, what = numeric(), sep = ",")
dist_dNdS_introgression_tract_80 <- scan(introgression_tract_dNdS_80, what = numeric(), sep = ",")
dist_dNdS_species_tree_80 <- scan(species_tree_tract_dNdS_80, what = numeric(), sep = ",")
df_paml <- data.frame(
dist_type = factor(c(rep("introgression_tract", 1000), rep("species_tree_tract", 1000), rep("introgression_tract", 1000), rep("species_tree_tract", 1000))),
mean_dN = c(dist_dN_introgression_tract_90, dist_dN_species_tree_90, dist_dN_introgression_tract_80, dist_dN_species_tree_80),
mean_dS = c(dist_dS_introgression_tract_90, dist_dS_species_tree_90, dist_dS_introgression_tract_80, dist_dS_species_tree_80),
mean_dNdS = c(dist_dNdS_introgression_tract_90, dist_dNdS_species_tree_90, dist_dNdS_introgression_tract_80, dist_dNdS_species_tree_80),
posterior_probability = factor(c(rep("probability_90", 2000), rep("probability_80", 2000)))
)
# Convert data to long format
df_paml_long <- df_paml %>% pivot_longer(cols = c(mean_dN, mean_dS, mean_dNdS),
names_to = "metric",
values_to = "value")
# Reorder the levels of the metric variable
df_paml_long$metric <- factor(df_paml_long$metric, levels = c("mean_dN", "mean_dS", "mean_dNdS"))
# Reorder the levels of the metric variable
df_paml_long$posterior_probability <- factor(df_paml_long$posterior_probability, levels = c("probability_90", "probability_80"))
subset_90_paml = df_paml[mean_dNdS$posterior_probability == "probability_90", ]
subset_90_paml = df_paml[ df_paml$posterior_probability == "probability_90", ]
results_90_paml <- t.test(mean_dNdS~dist_type, data=subset_90_paml, paired=FALSE, var.eq=F, alternative="two.sided")
subset_80_paml = df_paml[ df_paml$posterior_probability == "probability_80", ]
results_80_paml <- t.test(mean_dNdS~dist_type, data=subset_80_paml, paired=FALSE, var.eq=T, alternative="two.sided")
# Create a data frame to store the t-test results
t_test_results_coding <- data.frame(
posterior_probability = c("90%", "80%"),
t = c(results_90_paml$statistic, results_80_paml$statistic),
df = c(results_90_paml$parameter, results_80_paml$parameter),
p_value = c(results_90_paml$p.value, results_80_paml$p.value),
conf_interval = c(paste0("[", round(results_90_paml$conf.int[1], 4), ", ", round(results_90_paml$conf.int[2], 4), "]"),
paste0("[", round(results_80_paml$conf.int[1], 4), ", ", round(results_80_paml$conf.int[2], 4), "]")
)
)
# Create a kable table
kable(t_test_results_paml, format = "markdown", align = "c", digits = 3, col.names = c("Posterior Probability", "t", "df", "p", "Confidence Interval"))
subset_90_paml = df_paml[ df_paml$posterior_probability == "probability_90", ]
results_90_paml <- t.test(mean_dNdS~dist_type, data=subset_90_paml, paired=FALSE, var.eq=F, alternative="two.sided")
subset_80_paml = df_paml[ df_paml$posterior_probability == "probability_80", ]
results_80_paml <- t.test(mean_dNdS~dist_type, data=subset_80_paml, paired=FALSE, var.eq=T, alternative="two.sided")
# Create a data frame to store the t-test results
t_test_results_paml <- data.frame(
posterior_probability = c("90%", "80%"),
t = c(results_90_paml$statistic, results_80_paml$statistic),
df = c(results_90_paml$parameter, results_80_paml$parameter),
p_value = c(results_90_paml$p.value, results_80_paml$p.value),
conf_interval = c(paste0("[", round(results_90_paml$conf.int[1], 4), ", ", round(results_90_paml$conf.int[2], 4), "]"),
paste0("[", round(results_80_paml$conf.int[1], 4), ", ", round(results_80_paml$conf.int[2], 4), "]")
)
)
# Create a kable table
kable(t_test_results_paml, format = "markdown", align = "c", digits = 3, col.names = c("Posterior Probability", "t", "df", "p", "Confidence Interval"))
library(ggplot2)
setwd("/Users/matt/Documents/Github/dissertation_chapter_2/data/gene_density/")
# Define the csv files with list of gene counts at 90% posterior probability threshold
introgression_tract_base_count_90 = "introgression_tract_base_count_90.csv"
species_tree_tract_base_count_90 = "species_tree_tract_base_count_90.csv"
# Define the csv files with list of gene counts at 80% posterior probability threshold
introgression_tract_base_count_80 = "introgression_tract_base_count_80.csv"
species_tree_tract_base_count_80 = "species_tree_tract_base_count_80.csv"
# Read the CSV file as a one-dimensional vector
dist_introgression_tract_bases_90 <- scan(introgression_tract_base_count_90, what = numeric(), sep = ",")
dist_species_tree_tract_bases_90 <- scan(species_tree_tract_base_count_90, what = numeric(), sep = ",")
dist_introgression_tract_bases_80 <- scan(introgression_tract_base_count_80, what = numeric(), sep = ",")
dist_species_tree_tract_bases_80 <- scan(species_tree_tract_base_count_80, what = numeric(), sep = ",")
total_bases_90_st = 3747392
total_bases_90_it = 3747392
total_bases_80_st = 21820425
total_bases_80_it = 21820425
