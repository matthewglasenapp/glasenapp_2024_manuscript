install.packags("GenomicFeatures")
install.packages("GenomicFeatures")
install.packages("remotes")
remotes::install_github("coleoguy/evobir")
library(devtools)
install.packages("devtools")
library(devtools)
install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
results <- CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
results
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
library(devtools)
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 300, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 300, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 300, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 100, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 50, replicate = 1000, align.format='fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 50, replicate = 100, align.format='fasta')
library(devtools)
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
30.8
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
alignment_file = "/Users/matt/Desktop/test.fa"
CalcD(alignment = alignment_file, sig.test = "J", ambig="D",
block.size = 1000, replicate = 1000, align.format='fasta')
#alignment_file = "/Users/matt/Documents/GitHub/bindin_ebr1/matt_data/EBR1/EBR1_concatenated_exons/EBR1_filtered.fas"
alignment_file = "/Users/matt/Desktop/d_stat/mfra_hpul_sdro_sfra.fa"
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
library(devtools)
CalcD(alignment = alignment_file, sig.test = "J", ambig="R",
block.size = 1000, replicate = 1000, align.format='fasta')
results <- CalcD(alignment = alignment_file, sig.test = "J", ambig="R",
block.size = 1000, replicate = 1000, align.format='fasta')
results
library(evobiR)
alignment_file <- "/Users/matt/Desktop/d_stat/mfra_hpul_sdro_sfra.fa"
# Use capture.output to store the printed output in a variable
captured_output <- capture.output({
results <- CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
})
# Now the captured_output variable contains the printed output
cat(captured_output, sep = "\n")
captured_output
alignment_file = "/Users/matt/Desktop/d_stat/mfra_hpul_sdro_sfra.fa"
# Use capture.output without assigning to results
captured_output <- capture.output({
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
})
captured_output
captured_output[1]
captured_output[2]
class(captured_output)
captured_output[3]
captured_output[4]
captured_output[5]
captured_output[6]
captured_output[7]
captured_output[8]
captured_output[9]
captured_output[10]
captured_output[11]
captured_output[11]
captured_output[12]
captured_output[13]
d <- captured_output[6]
d
sites <- captured_output[3]
captured_output[3]
captured_output
help(CalcD)
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR.00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR_00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/test_spur.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR_00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/ebr1_full_gene_SPUR_00,QB3KMK014,QB3KMK016,QB3KMK010.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Documents/Github/urchin_grp/abba_baba/temp/test.fas"
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
CalcD(alignment = alignment_file, sig.test = "J", ambig = "R",
block.size = 1000, replicate = 1000, align.format = 'fasta')
alignment_file = "/Users/matt/Desktop/test.fas"
library(devtools)
#install_github('coleoguy/evobir', build_vignettes=T)
library(evobiR)
# Use capture.output without assigning to results
CalcD(alignment = alignment_file, sig.test = "N", ambig = "R", align.format = 'fasta')
alignment_file = "/Users/matt/Desktop/test.fas"
# Use capture.output without assigning to results
CalcD(alignment = alignment_file, sig.test = "N", ambig = "R", align.format = 'fasta')
alignment_file = "/Users/matt/Desktop/test.fas"
# Use capture.output without assigning to results
CalcD(alignment = alignment_file, sig.test = "N", ambig = "R", align.format = 'fasta')
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
setwd("/Users/matt/Documents/GitHub/glasenapp_2024_manuscript/data/paml/")
# dN 90% posterior probability threshold
#-------------------------------------------------------------------------------
# Load the csv files containing the distribution of mean dXY values and read as a one-dimensional vector
dN_introgressed_90_file = "dN_introgressed_90.csv"
dN_non_introgressed_90_file = "dN_non_introgressed_90.csv"
dist_dN_introgressed_90 <- scan(dN_introgressed_90_file, what = numeric(), sep = ",")
dist_dN_non_introgressed_90 <- scan(dN_non_introgressed_90_file, what = numeric(), sep = ",")
num_items = length(dist_dN_introgressed_90)
# Add one-dimensional vectors of mean dXY values to a dataframe called df
df_dN_90 <- data.frame(
dist_type = factor(c(rep("introgressed", num_items), rep("non_introgressed", num_items))),
dN = c(dist_dN_introgressed_90, dist_dN_non_introgressed_90))
# Calculate Z-scores for mean_divergence within each dist_type
df_dN_90_filtered <- df_dN_90 %>%
group_by(dist_type) %>%
mutate(z_score = scale(dN)) %>%
filter(abs(z_score) < 4) %>%
ungroup()
# Remove the z_score column if you no longer need it
df_dN_90_filtered <- select(df_dN_90_filtered, -z_score)
mean_values <- aggregate(dN ~ dist_type, df_dN_90_filtered, mean)
dN_90 <- ggplot(data = df_dN_90_filtered, aes(x = dN, color = dist_type)) +
stat_density(geom="line",position="identity", size = 1.1) +
geom_vline(data = mean_values, aes(xintercept = dN, linetype = dist_type, color = dist_type),
linetype = "dashed", size = 0.7, show.legend = FALSE) +
geom_text(data = mean_values, aes(x = dN, label = round(dN, 3), y = 0.0, color = dist_type), vjust = 0.0, hjust = -0.1, show.legend = FALSE, size = 2.5) +
scale_color_manual(values = c("introgressed" = "#1F78B4", "non_introgressed" = "#333333"),
labels = c("introgressed" = "Introgressed Genes", "non_introgressed" = "Non-Introgressed Genes")) +
labs(
x = "dN",
y = "Probability Density",
color = "Dist Type"
) +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 10),
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text = element_text(size = 10)
) +
scale_x_continuous(expand = expansion(mult = c(0.09, 0.09))) +
guides(color = guide_legend(title = NULL))
# Display the plot
print(dN_90)
# dS 90% posterior probability threshold
#-------------------------------------------------------------------------------
# Load the csv files containing the distribution of mean dXY values and read as a one-dimensional vector
dS_introgressed_90_file = "dS_introgressed_90.csv"
dS_non_introgressed_90_file = "dS_non_introgressed_90.csv"
dist_dS_introgressed_90 <- scan(dS_introgressed_90_file, what = numeric(), sep = ",")
dist_dS_non_introgressed_90 <- scan(dS_non_introgressed_90_file, what = numeric(), sep = ",")
num_items = length(dist_dS_introgressed_90)
# Add one-dimensional vectors of mean dXY values to a dataframe called df
df_dS_90 <- data.frame(
dist_type = factor(c(rep("introgressed", num_items), rep("non_introgressed", num_items))),
dS = c(dist_dS_introgressed_90, dist_dS_non_introgressed_90))
# Calculate Z-scores for mean_divergence within each dist_type
df_dS_90_filtered <- df_dS_90 %>%
group_by(dist_type) %>%
mutate(z_score = scale(dS)) %>%
filter(abs(z_score) < 4) %>%
ungroup()
# Remove the z_score column if you no longer need it
df_dS_90_filtered <- select(df_dS_90_filtered, -z_score)
mean_values <- aggregate(dS ~ dist_type, df_dS_90_filtered, mean)
dS_90 <- ggplot(data = df_dS_90_filtered, aes(x = dS, color = dist_type)) +
stat_density(geom="line",position="identity", size = 1.1) +
geom_vline(data = mean_values, aes(xintercept = dS, linetype = dist_type, color = dist_type),
linetype = "dashed", size = 0.7, show.legend = FALSE) +
geom_text(data = mean_values, aes(x = dS, label = round(dS, 3), y = 0.0, color = dist_type), vjust = 0.0, hjust = -0.1, show.legend = FALSE, size = 2.5) +
scale_color_manual(values = c("introgressed" = "#1F78B4", "non_introgressed" = "#333333"),
labels = c("introgressed" = "Introgressed Genes", "non_introgressed" = "Non-Introgressed Genes")) +
labs(
x = "dS",
y = "Probability Density",
color = "Dist Type"
) +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 10),
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text = element_text(size = 10)
) +
scale_x_continuous(expand = expansion(mult = c(0.09, 0.09))) +
guides(color = guide_legend(title = NULL))
# Display the plot
print(dS_90)
# dNdS 90% posterior probability threshold
#-------------------------------------------------------------------------------
# Load the csv files containing the distribution of mean dXY values and read as a one-dimensional vector
dNdS_introgressed_90_file = "dNdS_introgressed_90.csv"
dNdS_non_introgressed_90_file = "dNdS_non_introgressed_90.csv"
dist_dNdS_introgressed_90 <- scan(dNdS_introgressed_90_file, what = numeric(), sep = ",")
dist_dNdS_non_introgressed_90 <- scan(dNdS_non_introgressed_90_file, what = numeric(), sep = ",")
num_items = length(dist_dNdS_introgressed_90)
# Add one-dimensional vectors of mean dXY values to a dataframe called df
df_dNdS_90 <- data.frame(
dist_type = factor(c(rep("introgressed", num_items), rep("non_introgressed", num_items))),
dNdS = c(dist_dNdS_introgressed_90, dist_dNdS_non_introgressed_90))
# Calculate Z-scores for mean_divergence within each dist_type
df_dNdS_90_filtered <- df_dNdS_90 %>%
group_by(dist_type) %>%
mutate(z_score = scale(dNdS)) %>%
filter(abs(z_score) < 4) %>%
ungroup()
# Remove the z_score column if you no longer need it
df_dNdS_90_filtered <- select(df_dNdS_90_filtered, -z_score)
mean_values <- aggregate(dNdS ~ dist_type, df_dNdS_90_filtered, mean)
dNdS_90 <- ggplot(data = df_dNdS_90_filtered, aes(x = dNdS, color = dist_type)) +
stat_density(geom="line",position="identity", size = 1.1) +
geom_vline(data = mean_values, aes(xintercept = dNdS, linetype = dist_type, color = dist_type),
linetype = "dashed", size = 0.7, show.legend = FALSE) +
geom_text(data = mean_values, aes(x = dNdS, label = round(dNdS, 3), y = 0.0, color = dist_type), vjust = 0.0, hjust = -0.1, show.legend = FALSE, size = 2.5) +
scale_color_manual(values = c("introgressed" = "#1F78B4", "non_introgressed" = "#333333"),
labels = c("introgressed" = "Introgressed Genes", "non_introgressed" = "Non-Introgressed Genes")) +
labs(
x = "dNdS",
y = "Probability Density",
color = "Dist Type"
) +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 10),
axis.line = element_line(color = "black", linewidth = 0.5),
legend.position = "bottom",
legend.direction = "horizontal",
legend.text = element_text(size = 10)
) +
scale_x_continuous(expand = expansion(mult = c(0.09, 0.09))) +
guides(color = guide_legend(title = NULL))
# Display the plot
print(dNdS_90)
plot <- plot_grid(
dN_90 + theme(legend.position="none"),
dS_90 + theme(legend.position="none"),
dNdS_90 + theme(legend.position="none"),
align = 'vh',
labels = c('a.', 'b.', 'c.'),
nrow = 1
)
plot
View(df_dNdS_90_filtered)
